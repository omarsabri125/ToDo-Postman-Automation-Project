{
	"info": {
		"_postman_id": "c48f713c-bed3-48c0-bda1-2398a7511777",
		"name": "Todo project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29923398"
	},
	"item": [
		{
			"name": "register",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const firstName=pm.variables.replaceIn('{{$randomFirstName}}')\r",
							"\r",
							"pm.environment.set(\"FirstName\", firstName);\r",
							"\r",
							"const email=pm.variables.replaceIn('{{$randomEmail}}')\r",
							"\r",
							"pm.environment.set(\"Email\", email);\r",
							"\r",
							"const LastName=pm.variables.replaceIn('{{$randomLastName}}')\r",
							"pm.environment.set(\"LastName\", LastName);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"First Name should be correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    const FN=pm.environment.get(\"FirstName\");\r",
							"    pm.expect(jsonData.firstName).to.eql(FN);\r",
							"});\r",
							"var jsonData=pm.response.json();\r",
							"pm.environment.set(\"Token\", jsonData.access_token);\r",
							"pm.environment.set(\"userID\", jsonData.userID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\":\"{{FirstName}}\",\r\n    \"lastName\":\"{{LastName}}\",\r\n    \"email\":\"{{Email}}\",\r\n    \"password\":\"omar1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/users/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"First Name should be correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    const FN=pm.environment.get(\"FirstName\");\r",
							"    pm.expect(jsonData.firstName).to.eql(FN);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"{{Email}}\",\r\n    \"password\":\"omar1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/users/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"Add todo API todo name should be correct \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.item).to.eql(\"learn postman\");\r",
							"});\r",
							"pm.test(\"Check that the response body not contain learn java\", function () {\r",
							"    pm.response.to.not.have.body(\"learn Java\");\r",
							"});\r",
							"pm.test(\"check whether userID in the Add todo matches userID in the register or not \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var userid = pm.environment.get(\"userID\");\r",
							"    pm.expect(jsonData.userID).to.eql(userid);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"TaskID\", jsonData._id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"item\": \"learn postman\",\r\n    \"isCompleted\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/tasks",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get specific ToDo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"ToDo name should be correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.item).to.eql(\"learn postman\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/tasks/{{TaskID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"tasks",
						"{{TaskID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update ToDo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"Check that the response body not contain learn postman\", function () {\r",
							"    pm.response.to.not.have.body(\"learn postman\");\r",
							"});\r",
							"pm.test(\"the item should be update\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.item).to.eql(\"learn java\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"item\": \"learn java\",\r\n    \"isCompleted\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/tasks/{{TaskID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"tasks",
						"{{TaskID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get specific ToDo after update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"get specific ToDo after update\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.item).to.eql(\"learn java\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/tasks/{{TaskID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"tasks",
						"{{TaskID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete specific ToDo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"ToDo has been deleted successfully\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.isCompleted).to.eql(false);\r",
							"});\r",
							"pm.test(\"check that if body contains learn java\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"learn java\");\r",
							"});\r",
							"pm.test(\"Check that the response body not contain learn postman\", function () {\r",
							"    pm.response.to.not.have.body(\"learn postman\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/tasks/{{TaskID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"tasks",
						"{{TaskID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "seed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/seed",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"seed"
					]
				}
			},
			"response": []
		}
	]
}